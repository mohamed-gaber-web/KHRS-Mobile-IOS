{"version":3,"sources":["./src/app/training/test-course/test-finished/test-finished-routing.module.ts","./src/app/training/test-course/test-finished/test-finished.module.ts","./src/app/shared/services/test.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACc;AAEC;AAExD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oEAAgB;KAC5B;CACF,CAAC;IAMW,6BAA6B,SAA7B,6BAA6B;CAAG;AAAhC,6BAA6B;IAJzC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,6BAA6B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;AChBD;AACM;AACF;AAEA;AAEkC;IAYlE,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IATlC,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,2FAA6B;SAC9B;QACD,YAAY,EAAE,EAAE;KACjB,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;AClBQ;AAEoB;AAQlC;IAShB,WAAW,SAAX,WAAW;IAItB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,WAAM,GAAW,CAAC,CAAC;IAGoB,CAAC;IAExC;;;;;OAKG;IACH,WAAW,CAAC,QAAgB,EAAE,MAAc;QAC1C,MAAM,MAAM,GAAG,aAAa,QAAQ,WAAW,MAAM,EAAE;QACvD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,0DAAW,EAAE,GAAG,MAAM,CAAE,CAAC;IACnD,CAAC;IAEC;;;;;KAKC;IACH,aAAa;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,gEAAiB,EAAE,CAAC,CAAC;IACjD,CAAC;IAGC;;;KAGC;IACH,iBAAiB,CAAC,SAA0B;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,6DAAc,EAAE,EAAG,SAAS,CAAC,CAAC;IACzD,CAAC;IAEC;;;KAGC;IACD,YAAY,CAAC,UAAkB;QAC7B,MAAM,MAAM,GAAG,eAAe,UAAU,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,2DAAY,EAAE,GAAG,MAAM,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;KAIC;IACD,cAAc,CAAC,QAAgB;QAE7B,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG;YAClB,YAAY,EAAE,MAAgB;YAC9B,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,eAAe,EAAE,IAAI,CAAC,OAAO;aAC9B,CAAC;SACH,CAAC;QACF,MAAM,MAAM,GAAG,aAAa,QAAQ,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,6DAAc,EAAE,GAAG,MAAM,EAAE,WAAW,CAAC,CAAC;IAClE,CAAC;CAEJ;;YAhFQ,+DAAU;;AAiBN,WAAW;IAHvB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,WAAW,CA+DvB;AA/DuB","file":"training-test-course-test-finished-test-finished-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestFinishedPage } from './test-finished.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestFinishedPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestFinishedPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TestFinishedPageRoutingModule } from './test-finished-routing.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TestFinishedPageRoutingModule\n  ],\n  declarations: []\n})\nexport class TestFinishedPageModule {}\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport {\n  getTextType,\n  finishedTest,\n  getUserActiveTest,\n  sendAnswerTest,\n  getCertificate}\nfrom './../../api.constants';\n\nimport { AnswerTestModel } from '../models/answerTestModel';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TestService {\n  offset: number = 1;\n  authKey: any;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Get Test\n   * courseId [ number ]\n   * offset [ number ]\n   *\n   */\n  getTestType(courseId: number, offset: number) {\n    const params = `?courseId=${courseId}&offset=${offset}`\n    return this.http.get(`${getTextType}` + params );\n  }\n\n    /**\n   * Get check user test\n   * return isActive [ boolean ]\n   * return testApi [  ]\n   *\n   */\n  checkUserTest() {\n      return this.http.get(`${getUserActiveTest}`);\n  }\n\n\n    /**\n   * send answer question\n   *\n   */\n  sendAnswerTesting(answerObj: AnswerTestModel) {\n    return this.http.post(`${sendAnswerTest}` , answerObj);\n  }\n\n    /**\n   * send answer question\n   *\n   */\n    finishedTest(userTestId: number) {\n      const params = `?userTestId=${userTestId}`;\n      return this.http.post(`${finishedTest}` + params, {});\n    }\n\n    /**\n     * Get Certificate\n     * courseId [ number ]\n     *\n   */\n    getCertificate(courseId: number) {\n\n      this.authKey = localStorage.getItem('access_token');\n      const httpOptions = {\n        responseType: 'blob' as 'json',\n        headers: new HttpHeaders({\n          'Authorization': this.authKey,\n        })\n      };\n      const params = `?courseId=${courseId}`;\n      return this.http.get(`${getCertificate}` + params, httpOptions);\n    }\n\n}\n"],"sourceRoot":"webpack:///"}